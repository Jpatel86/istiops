apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ .Values.app }}-{{ .Values.target }}-{{ .Values.version | replace "." "" | replace "/" "-" | replace "_" "" | lower }}-{{ .Values.build }}
  labels:
    app: {{ .Values.app }}
    chart: {{ template "api.chart" . }}
    fullname: {{ .Values.app }}-{{ .Values.target }}-{{ .Values.version | replace "." "" | replace "/" "-" | replace "_" "" | lower }}-{{ .Values.build }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    version: {{ .Values.version }}
    build: {{ quote .Values.build }}
spec:
  {{- if eq .Values.target "dev" }}
  replicas: {{ .Values.deployment.replicas.dev | default 1 }}
  {{ else if eq .Values.target "qa" }}
  replicas: {{ .Values.deployment.replicas.qa | default 1 }}
  {{ else if eq .Values.target "ext" }}
  replicas: {{ .Values.deployment.replicas.ext | default 2 }}
  {{ else if eq .Values.target "prod" }}
  replicas: {{ .Values.deployment.replicas.prod | default 2 }}
  {{ else if eq .Values.target "itau" }}
  replicas: {{ .Values.deployment.replicas.itau | default 2 }}
  {{ else if eq .Values.target "pci" }}
  replicas: {{ .Values.deployment.replicas.pci | default 2 }}
  {{ else }}
  replicas: 1
  {{ end }}
  selector:
    matchLabels:
      app: {{ .Values.app }}
      fullname: {{ .Values.app }}-{{ .Values.target }}-{{ .Values.version | replace "." "" | replace "/" "-" | replace "_" "" | lower }}-{{ .Values.build }}
      version: {{ .Values.version }}
      build: {{ quote .Values.build }}
  template:
    metadata:
      annotations:
        {{- if .Values.deployment.role }}
        iam.amazonaws.com/role: {{ .Values.deployment.role }}
        {{ else }}
        iam.amazonaws.com/role: {{ .Values.app }}-role
        {{- end }}
      labels:
        app: {{ .Values.app }}
        fullname: {{ .Values.app }}-{{ .Values.target }}-{{ .Values.version | replace "." "" | replace "/" "-" | replace "_" "" | lower }}-{{ .Values.build }}
        release: {{ .Release.Name }}
        version: {{ .Values.version }}
        build: {{ quote .Values.build }}
    spec:
      {{- if ne .Values.target "itau" }}
      dnsConfig:
        options:
          - name: single-request-reopen
      {{ end }}
      nodeSelector:
        kops.k8s.io/instancegroup: "{{ .Values.deployment.image.nodeSelectorInstanceGroup | default "nodes" }}"
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: kops.k8s.io/instancegroup
                operator: In
                values:
                - slaves
            topologyKey: "kubernetes.io/hostname"
      containers:
        - name: {{ .Values.app }}
          image: "{{ .Values.deployment.image.dockerRegistry | default "270036487593.dkr.ecr.us-east-1.amazonaws.com" }}/{{ .Values.app }}:{{ .Values.version }}"
          imagePullPolicy: {{ .Values.deployment.image.pullPolicy }}
          ports:
            {{- range $portName, $portNumber := .Values.deployment.image.ports }}
            - name: {{ $portName }}
              containerPort: {{ $portNumber }}
              protocol: TCP
            {{- end }}
          envFrom:
          - configMapRef:
              name: {{ .Values.app }}-{{ .Values.target }}-{{ .Values.version | replace "." "" | replace "/" "-" | replace "_" "" | lower }}-{{ .Values.build }}-config
          - secretRef:
              name: {{ .Values.app }}-secrets
          - configMapRef:
              name: commons-config
          {{- if .Values.deployment.image.healthCheck.enabled }}
          livenessProbe:
            {{- if .Values.deployment.image.ports.http }}
            exec:
              command:
              - curl
              - -fsS
              - http://localhost:{{ .Values.deployment.image.ports.http }}{{ .Values.deployment.image.healthCheck.livenessProbeEndpoint | default "/health" }}
            {{ else }}
            tcpSocket:
              port: {{ .Values.deployment.image.ports.grpc | default 1234 }}
            {{- end }}
            initialDelaySeconds: 15
            periodSeconds: 30
          readinessProbe:
            {{- if .Values.deployment.image.ports.http }}
            exec:
              command:
              - curl
              - -fsS
              - http://localhost:{{ .Values.deployment.image.ports.http }}{{ .Values.deployment.image.healthCheck.readnessProbeEndpoint | default "/health" }}
            {{ else }}
            tcpSocket:
              port: {{ .Values.deployment.image.ports.grpc | default 1234 }}
            {{- end }}
            initialDelaySeconds:  15
            periodSeconds: 5
            successThreshold: 1
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
